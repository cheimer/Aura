EnhancedInput
AD의 X축이 기본값 WD로 바꾸려면 스위즐 입력 축값을 추가한 후 YXZ로 바꿔서 Y를 우선받게함

Interface
상속을 통해 사용되며 이를 이용해서 클래스간의 종속성을 줄일 수 있음
예를 들어 Controller에서 AAA 클래스의 특정 행동이 필요할 떄 직접적으로 호출하면 Controller와 AAA간의 종속성이 생김
따라서 AAA가 IAAAAction인터페이스를 상속한 후 Controller에서 IAAAAction을 호출하게 함
IAAAACtion에는 virtual void AAADoSomething() = 0; 같은 순수가상함수를 선언함

PostProcess
랜더링 후에 처리하는 랜더링으로 덮어쓰는 느낌으로 생각하면 될듯
월드에서 PostProcessVolume을 생성한 후 필요에 따라 크기를 설정하거나 전체에 설정할 때는 무한 규모를 체크하면 됨
그리고 PostProcessMaterial에서 해당하는 머티리얼을 지정함
이 프로젝트의 경우 프로젝트 세팅 - customdepth - enabled with stencil로 변경한 후 
GetMesh()->SetRenderCustomDepth(true);
GetMesh()->SetCustomDepthStencilValue(CUSTOM_DEPTH_INT);
로 설정했음 위는 외곽선을 그리는데 주로 사용한다고 적힌 옵션이며 밑의 값은 PostProcessMaterial에서 설정한 머티리얼의 값임

PlayerState
Player에 대한 정보를 입력할 때 사용함. 장점은 Player가 사라지는 등의 상황에서도 값을 따로 처리안해도됨 단점은 간단한 Player를 만들 때도 복잡해짐
Player에 바로 입력하는 경우는 구현이 간단해짐

서버 - 클라이언트
server - Gamemode, 모든 컨트롤러, 모든 플레이어 스테이트,              값의 변경을 복제하여 알림
client -           자신 컨트롤러, 모든 플레이어 스테이트, 자신 HUD/위젯, 값의 변경을 알리지 못함

Lambda
간단한 함수의 경우 이름을 따로 선언하지않고 .AddLambda([] () {}); 방식으로 생성가능함
[this] (AAA* AAAPtr) { AAAptr->AAAFunc() } 이런 식으로 사용 가능하며 Lambda의 경우 클라스에 속하지 않는 임시 함수이기 때문에 []은 헤더같은 느낌으로 씀

-------------------------------------------------------------------------------------------------------------------------------------------
AbilitySystemComponent

SetReplicationMode()
Full - Single
Mixed - Multi, PlayerControlled  // OwnerActor가 PlayerState가 아니라면 SetOwner로 Controller에 설정해줘야함
Minimal - Multi, AIControlled

OwnerActor - 소유하고있는 액터, AvatarActor - 월드에서 보이고 있는 액터
InitAbilityActorInfo로 각각 설정해주어야하며 설정하는 위치는 다음과 같음
PlayerControlled(Owner == Avatar): Server - PossessedBy, Client - AcknowledgePossession / 빙의했을 때 값을 입력해줌
PlayerControlled(Owner != Avatar): Server - PossessedBy, Client - OnRep_PlayerState     / 빙의했을 때, 그리고 PlayerState에서 값을 복사할 때 입력함
AIControlled:                      Server, Client - BeginPlay

에디터에서 Attribute Test - Default Starting Data를 통해 Attribute의 초기값을 설정할 수 있지만 주로 GameplayEffect를 활용함


-------------------------------------------------------------------------------------------------------------------------------------------
AttributeSet

값을 저장하는 PlayerState와 비슷한 느낌이지만 Multiplay에 최적화되어있음
BaseValue, CurrentValue로 나누어서 저장함. 그런 후 값이 바뀌면 서버가 응답할 때까지 CurrentValue에 저장하고 사용함. 그런 후에 응답에 따라 BaseValue의 값을 바꿀지 정함

값은 FGameplayAttributeData에 저장하며 float으로 정해짐. 또한 값을 저장하는 순서가 있는데
UPROPERTY(ReplicatedUsing = OnRep_Examp) FGameplayAttributeData Examp;
UFUNCTION() void OnRep_Examp(const FGameplayAttributeData& OldExamp) const;

void OnRep_Examp(~~Data& OldExamp) const 
{ GAMEPLAYATTRIBUTE_REPNOTIFY(UExampAttributeSet, Examp, OldExamp); }
void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) // override한 함수
{ Super::~~; DOREPLIFETIME_CONDITION_NOTIFY(UExampAttributeSet, Examp, COND_None, REPNOTIFY_Change); }
//TODO: AuraPlayerState에서 FGameplayAttributeData가 아닌 int32를 하며 OnRep의 함수 부분을 비우고 DOREPLIFETIME(ClassName, int32) 방식으로 사용함
//해당 변수를 사용할 때의 방식인지 아니면 다른 방식으로 함수를 사용할 예정인지 모르겠음. 나중에 듣고 추가


PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue)를 상속받아서 값이 변하기 전에 설정가능함 -> Clamp로 범위 설정만 하고 로직 등은 X
PostGameplayEffectExecute(const FGameplayEffectModCallbackData& Data)를 사용해서 값이 변할 때의 값을 Data에서 받아 사용할 수 있음
Source, Target 모두 받을 수 있으며 AvatarActor, Controller, Character, AbilitySystemComponent등을 가져올 수 있음


-------------------------------------------------------------------------------------------------------------------------------------------
GameplayEffect
AbilitySystemComponent->ApplyGameplayEffectSpecToSelf(FGameplayEffectSpec)를 통해 설정하며 FGameplayEffectSpec은
FGameplayEffectSpecHandle ~~ = AbilitySystemComponent->MakeOutgoingSpec(GameplayEffectClass, (float)Level, EffectContextHandle)로 가져오며
FGameplayEffectContextHandle EffectContextHandle = AbilitySystemComponent->MakeEffectContext() 가 필요함
EffectContextHandle.AddSourceObject(this)를 해서 설정해주면
AbilitySystemComponent에 대해 GameplayEffectClass를 적용할 수 있게 됨. GameplayEffectClass은 TSubclassOf<UGameplayEffect>로 BP로 설정함
ApplyGameplayEffectSpecToSelf의 반환값인 FActiveGameplayEffectHandle를 이용해서 필요할 때 사용할 수 있음
예를 들어 Infinite의 경우 따로 삭제하지않으면 계속 유지되기 때문에 EndOverlap에서 해당 값을 받아서 필요하면 삭제해야함

초기값 설정 등은 Instance로 설정해 변경하고 그에 따라 변하는 값은 따로 delegate하는 것이 아닌 Infinite로 한 후 ApplyGameplayEffectSpecToTarget를 하면 됨

BP_GameplayEffect
상속을 사용하지 않고 사용하며 GameplayEffect - Instance, Infinite, Duration을 선택할 수 있음
Instance는 바로 적용되는 값이며 Infinite, Duration은 지속적인 값으로 만약 Period가 0이라면 해당 액터가 사라지면 값이 이전 값으로 초기화됨
Period는 Tick과 비슷하게 주기이며 0.1일 경우 0.1초마다 값을 적용함 Duration은 지속시간을 설정가능함
Modifiers를 통해 값을 설정하며 커브 테이블을 통해 값을 설정할 수 있음

Modifiers - ModifierMagnitude의 Scalable float은 Attribute를 단순히 그 값으로 Modifier OP에 있는 설정을 함
Attribute Based는 다른 Attribute에서 부터 값을 변경하는 것으로 Backing Attribute의 값을 (Pre + Backing) * Coefficient + Post로 계산함
Custom Calculation Class는 제작한 클래스를 지정한후 필요에 따라 태그를 지정하면 되며 그 클래스는 GameplayModMagnitudeCalculation을 상속받아야함(후술 MMC)
MMC_MaxHealth, MMC_MaxMana에 자세한 함수명이 적혀있으며 전체적인 흐름은 생성자에서 값의 환경을 설정할 변수를 초기화한 후
상속받아 구현한 함수에서 변수와 Tags를 참조하여 값을 받아옴. 그 후 필요한 계산을 한 후 리턴하면 됨


-------------------------------------------------------------------------------------------------------------------------------------------
Widget Controller
Object에서 상속받아 만든 클래스로 Widget에서 생성하며 PlayerController, PlayerState, AbilitySystemComponent, AttributeSet을 변수로 가짐
그 후 필요한 기능을 구현하는 자식 클래스를 만들어서 구현함
바인딩은 AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(
		    AttributeSet->GetHealthAttribute()).AddUObject(this, &UWidgetController::HealthChanged); //TODO: 나중에 변경할 가능성이 있음. GamePlay Effect
처럼 하며 이를 통해   AttributeSet->GetHealthAttribute()로 가져온 값이 변할 때 HealthChanged가 실행되게 설정할 수 있음

BeginOverlap, EndOverlap
C++에서 OnOverlap, EndOverlap등으로 해당하는 기능을 구현한 후 블루프린터에서 이벤트를 바인딩함.
블루프린터에서 Collision을 생성하거나 할 경우 유용하게 사용 가능.
또한 Enum으로 여러 상황에 대한 변수를 두어서 그 변수에 따라 어떤 방식으로 구현할 지, if문으로 구성함


-------------------------------------------------------------------------------------------------------------------------------------------
GameplayTag
프로젝트 세팅에서 DataTable을 추가하거나 직접 추가하는 방식으로 GameplayTag를 추가할 수 있음
또한 GameplayEffect에서 Stack이 가능한 경우 Tag가 중첩되어 쌓이지 않지만 Stack이 없으면 중첩이 가능함
GameplayTag를 이용해서 어떤 Tag가 추가 될 경우에 대한 Delegate를 하는 등이 가능함

